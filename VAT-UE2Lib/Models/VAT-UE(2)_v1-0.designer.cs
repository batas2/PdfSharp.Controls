// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>DeloitteTest</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>True</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace VATUE2Lib.Models
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;


    /// <summary>
    /// INFORMACJA PODSUMOWUJĄCA O DOKONANYCH WEWNĄTRZWSPÓLNOTOWYCH TRANSAKCJACH
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Deklaracja
    {

        private TNaglowek naglowekField;

        private DeklaracjaPodmiot1 podmiot1Field;

        private PozycjeSzczegolowe pozycjeSzczegoloweField;

        private DeklaracjaOswiadczenie oswiadczenieField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Nagłówek deklaracji
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNaglowek Naglowek
        {
            get
            {
                if ((this.naglowekField == null))
                {
                    this.naglowekField = new TNaglowek();
                }
                return this.naglowekField;
            }
            set
            {
                this.naglowekField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public DeklaracjaPodmiot1 Podmiot1
        {
            get
            {
                if ((this.podmiot1Field == null))
                {
                    this.podmiot1Field = new DeklaracjaPodmiot1();
                }
                return this.podmiot1Field;
            }
            set
            {
                this.podmiot1Field = value;
            }
        }

        /// <summary>
        /// Informacja o wewnątrzwspólnotowych transakcjach
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public PozycjeSzczegolowe PozycjeSzczegolowe
        {
            get
            {
                if ((this.pozycjeSzczegoloweField == null))
                {
                    this.pozycjeSzczegoloweField = new PozycjeSzczegolowe();
                }
                return this.pozycjeSzczegoloweField;
            }
            set
            {
                this.pozycjeSzczegoloweField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public DeklaracjaOswiadczenie Oswiadczenie
        {
            get
            {
                return this.oswiadczenieField;
            }
            set
            {
                this.oswiadczenieField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Deklaracja));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Deklaracja object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Deklaracja object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Deklaracja object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Deklaracja obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Deklaracja);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Deklaracja obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Deklaracja Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Deklaracja)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Deklaracja object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Deklaracja object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Deklaracja object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Deklaracja obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Deklaracja);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Deklaracja obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Deklaracja obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Deklaracja LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Deklaracja LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = true)]
    public partial class TNaglowek
    {

        private TNaglowekKodFormularza kodFormularzaField;

        private sbyte wariantFormularzaField;

        private string rokField;

        private sbyte itemField;

        private ItemChoiceType itemElementNameField;

        private sbyte celZlozeniaField;

        private TKodUS kodUrzeduField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TNaglowekKodFormularza KodFormularza
        {
            get
            {
                if ((this.kodFormularzaField == null))
                {
                    this.kodFormularzaField = new TNaglowekKodFormularza();
                }
                return this.kodFormularzaField;
            }
            set
            {
                this.kodFormularzaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public sbyte WariantFormularza
        {
            get
            {
                return this.wariantFormularzaField;
            }
            set
            {
                this.wariantFormularzaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "gYear", Order = 2)]
        public string Rok
        {
            get
            {
                return this.rokField;
            }
            set
            {
                this.rokField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Kwartal", typeof(sbyte), Order = 3)]
        [System.Xml.Serialization.XmlElementAttribute("Miesiac", typeof(sbyte), Order = 3)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public sbyte Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName
        {
            get
            {
                return this.itemElementNameField;
            }
            set
            {
                this.itemElementNameField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 5)]
        public sbyte CelZlozenia
        {
            get
            {
                return this.celZlozeniaField;
            }
            set
            {
                this.celZlozeniaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 6)]
        public TKodUS KodUrzedu
        {
            get
            {
                return this.kodUrzeduField;
            }
            set
            {
                this.kodUrzeduField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNaglowek));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNaglowek object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNaglowek object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNaglowek object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNaglowek obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNaglowek);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNaglowek obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNaglowek Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNaglowek)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNaglowek object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNaglowek object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNaglowek object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNaglowek obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNaglowek);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNaglowek obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNaglowek obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNaglowek LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNaglowek LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class TNaglowekKodFormularza
    {

        private string kodSystemowyField;

        private TKodFormularza valueField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public TNaglowekKodFormularza()
        {
            this.kodSystemowyField = "VAT-UE (2)";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string kodSystemowy
        {
            get
            {
                return this.kodSystemowyField;
            }
            set
            {
                this.kodSystemowyField = value;
            }
        }

        [System.Xml.Serialization.XmlTextAttribute()]
        public TKodFormularza Value
        {
            get
            {
                return this.valueField;
            }
            set
            {
                this.valueField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TNaglowekKodFormularza));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TNaglowekKodFormularza object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TNaglowekKodFormularza object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TNaglowekKodFormularza object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TNaglowekKodFormularza obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNaglowekKodFormularza);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TNaglowekKodFormularza obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TNaglowekKodFormularza Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TNaglowekKodFormularza)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TNaglowekKodFormularza object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TNaglowekKodFormularza object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TNaglowekKodFormularza object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TNaglowekKodFormularza obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TNaglowekKodFormularza);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TNaglowekKodFormularza obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TNaglowekKodFormularza obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TNaglowekKodFormularza LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TNaglowekKodFormularza LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    public enum TKodFormularza
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("VAT-UE")]
        VATUE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TAdresZagraniczny
    {

        private TKodKraju kodKrajuField;

        private string kodPocztowyField;

        private string miejscowoscField;

        private string ulicaField;

        private string nrDomuField;

        private string nrLokaluField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TKodKraju KodKraju
        {
            get
            {
                return this.kodKrajuField;
            }
            set
            {
                this.kodKrajuField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1)]
        public string KodPocztowy
        {
            get
            {
                return this.kodPocztowyField;
            }
            set
            {
                this.kodPocztowyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 2)]
        public string Miejscowosc
        {
            get
            {
                return this.miejscowoscField;
            }
            set
            {
                this.miejscowoscField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 3)]
        public string Ulica
        {
            get
            {
                return this.ulicaField;
            }
            set
            {
                this.ulicaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 4)]
        public string NrDomu
        {
            get
            {
                return this.nrDomuField;
            }
            set
            {
                this.nrDomuField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 5)]
        public string NrLokalu
        {
            get
            {
                return this.nrLokaluField;
            }
            set
            {
                this.nrLokaluField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TAdresZagraniczny));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TAdresZagraniczny object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TAdresZagraniczny object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TAdresZagraniczny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TAdresZagraniczny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdresZagraniczny);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TAdresZagraniczny obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TAdresZagraniczny Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TAdresZagraniczny)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TAdresZagraniczny object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TAdresZagraniczny object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TAdresZagraniczny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TAdresZagraniczny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdresZagraniczny);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TAdresZagraniczny obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TAdresZagraniczny obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TAdresZagraniczny LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TAdresZagraniczny LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    public enum TKodKraju
    {

        /// <remarks/>
        AF,

        /// <remarks/>
        AX,

        /// <remarks/>
        AL,

        /// <remarks/>
        DZ,

        /// <remarks/>
        AD,

        /// <remarks/>
        AO,

        /// <remarks/>
        AI,

        /// <remarks/>
        AQ,

        /// <remarks/>
        AG,

        /// <remarks/>
        AN,

        /// <remarks/>
        SA,

        /// <remarks/>
        AR,

        /// <remarks/>
        AM,

        /// <remarks/>
        AW,

        /// <remarks/>
        AU,

        /// <remarks/>
        AT,

        /// <remarks/>
        AZ,

        /// <remarks/>
        BS,

        /// <remarks/>
        BH,

        /// <remarks/>
        BD,

        /// <remarks/>
        BB,

        /// <remarks/>
        BE,

        /// <remarks/>
        BZ,

        /// <remarks/>
        BJ,

        /// <remarks/>
        BM,

        /// <remarks/>
        BT,

        /// <remarks/>
        BY,

        /// <remarks/>
        BO,

        /// <remarks/>
        BA,

        /// <remarks/>
        BW,

        /// <remarks/>
        BR,

        /// <remarks/>
        BN,

        /// <remarks/>
        IO,

        /// <remarks/>
        BG,

        /// <remarks/>
        BF,

        /// <remarks/>
        BI,

        /// <remarks/>
        CL,

        /// <remarks/>
        CN,

        /// <remarks/>
        HR,

        /// <remarks/>
        CY,

        /// <remarks/>
        TD,

        /// <remarks/>
        ME,

        /// <remarks/>
        DK,

        /// <remarks/>
        DM,

        /// <remarks/>
        DO,

        /// <remarks/>
        DJ,

        /// <remarks/>
        EG,

        /// <remarks/>
        EC,

        /// <remarks/>
        ER,

        /// <remarks/>
        EE,

        /// <remarks/>
        ET,

        /// <remarks/>
        FK,

        /// <remarks/>
        FJ,

        /// <remarks/>
        PH,

        /// <remarks/>
        FI,

        /// <remarks/>
        FR,

        /// <remarks/>
        TF,

        /// <remarks/>
        GA,

        /// <remarks/>
        GM,

        /// <remarks/>
        GH,

        /// <remarks/>
        GI,

        /// <remarks/>
        GR,

        /// <remarks/>
        GD,

        /// <remarks/>
        GL,

        /// <remarks/>
        GE,

        /// <remarks/>
        GU,

        /// <remarks/>
        GG,

        /// <remarks/>
        GY,

        /// <remarks/>
        GF,

        /// <remarks/>
        GP,

        /// <remarks/>
        GT,

        /// <remarks/>
        GN,

        /// <remarks/>
        GQ,

        /// <remarks/>
        GW,

        /// <remarks/>
        HT,

        /// <remarks/>
        ES,

        /// <remarks/>
        NL,

        /// <remarks/>
        HN,

        /// <remarks/>
        HK,

        /// <remarks/>
        IN,

        /// <remarks/>
        ID,

        /// <remarks/>
        IQ,

        /// <remarks/>
        IR,

        /// <remarks/>
        IE,

        /// <remarks/>
        IS,

        /// <remarks/>
        IL,

        /// <remarks/>
        JM,

        /// <remarks/>
        JP,

        /// <remarks/>
        YE,

        /// <remarks/>
        JE,

        /// <remarks/>
        JO,

        /// <remarks/>
        KY,

        /// <remarks/>
        KH,

        /// <remarks/>
        CM,

        /// <remarks/>
        CA,

        /// <remarks/>
        QA,

        /// <remarks/>
        KZ,

        /// <remarks/>
        KE,

        /// <remarks/>
        KG,

        /// <remarks/>
        KI,

        /// <remarks/>
        CO,

        /// <remarks/>
        KM,

        /// <remarks/>
        CG,

        /// <remarks/>
        CD,

        /// <remarks/>
        KP,

        /// <remarks/>
        XK,

        /// <remarks/>
        CR,

        /// <remarks/>
        CU,

        /// <remarks/>
        KW,

        /// <remarks/>
        LA,

        /// <remarks/>
        LS,

        /// <remarks/>
        LB,

        /// <remarks/>
        LR,

        /// <remarks/>
        LY,

        /// <remarks/>
        LI,

        /// <remarks/>
        LT,

        /// <remarks/>
        LV,

        /// <remarks/>
        LU,

        /// <remarks/>
        MK,

        /// <remarks/>
        MG,

        /// <remarks/>
        YT,

        /// <remarks/>
        MO,

        /// <remarks/>
        MW,

        /// <remarks/>
        MV,

        /// <remarks/>
        MY,

        /// <remarks/>
        ML,

        /// <remarks/>
        MT,

        /// <remarks/>
        MP,

        /// <remarks/>
        MA,

        /// <remarks/>
        MQ,

        /// <remarks/>
        MR,

        /// <remarks/>
        MU,

        /// <remarks/>
        MX,

        /// <remarks/>
        XL,

        /// <remarks/>
        FM,

        /// <remarks/>
        UM,

        /// <remarks/>
        MD,

        /// <remarks/>
        MC,

        /// <remarks/>
        MN,

        /// <remarks/>
        MS,

        /// <remarks/>
        MZ,

        /// <remarks/>
        MM,

        /// <remarks/>
        NA,

        /// <remarks/>
        NR,

        /// <remarks/>
        NP,

        /// <remarks/>
        DE,

        /// <remarks/>
        NE,

        /// <remarks/>
        NG,

        /// <remarks/>
        NI,

        /// <remarks/>
        NU,

        /// <remarks/>
        NF,

        /// <remarks/>
        NO,

        /// <remarks/>
        NC,

        /// <remarks/>
        NZ,

        /// <remarks/>
        PS,

        /// <remarks/>
        OM,

        /// <remarks/>
        PK,

        /// <remarks/>
        PW,

        /// <remarks/>
        PA,

        /// <remarks/>
        PG,

        /// <remarks/>
        PY,

        /// <remarks/>
        PE,

        /// <remarks/>
        PN,

        /// <remarks/>
        PF,

        /// <remarks/>
        PL,

        /// <remarks/>
        GS,

        /// <remarks/>
        PT,

        /// <remarks/>
        PR,

        /// <remarks/>
        CF,

        /// <remarks/>
        CZ,

        /// <remarks/>
        KR,

        /// <remarks/>
        ZA,

        /// <remarks/>
        RE,

        /// <remarks/>
        RU,

        /// <remarks/>
        RO,

        /// <remarks/>
        RW,

        /// <remarks/>
        EH,

        /// <remarks/>
        BL,

        /// <remarks/>
        KN,

        /// <remarks/>
        LC,

        /// <remarks/>
        MF,

        /// <remarks/>
        VC,

        /// <remarks/>
        SV,

        /// <remarks/>
        WS,

        /// <remarks/>
        AS,

        /// <remarks/>
        SM,

        /// <remarks/>
        SN,

        /// <remarks/>
        RS,

        /// <remarks/>
        SC,

        /// <remarks/>
        SL,

        /// <remarks/>
        SG,

        /// <remarks/>
        SK,

        /// <remarks/>
        SI,

        /// <remarks/>
        SO,

        /// <remarks/>
        LK,

        /// <remarks/>
        PM,

        /// <remarks/>
        US,

        /// <remarks/>
        SZ,

        /// <remarks/>
        SD,

        /// <remarks/>
        SR,

        /// <remarks/>
        SJ,

        /// <remarks/>
        SH,

        /// <remarks/>
        SY,

        /// <remarks/>
        CH,

        /// <remarks/>
        SE,

        /// <remarks/>
        TJ,

        /// <remarks/>
        TH,

        /// <remarks/>
        TW,

        /// <remarks/>
        TZ,

        /// <remarks/>
        TG,

        /// <remarks/>
        TK,

        /// <remarks/>
        TO,

        /// <remarks/>
        TT,

        /// <remarks/>
        TN,

        /// <remarks/>
        TR,

        /// <remarks/>
        TM,

        /// <remarks/>
        TV,

        /// <remarks/>
        UG,

        /// <remarks/>
        UA,

        /// <remarks/>
        UY,

        /// <remarks/>
        UZ,

        /// <remarks/>
        VU,

        /// <remarks/>
        WF,

        /// <remarks/>
        VA,

        /// <remarks/>
        HU,

        /// <remarks/>
        VE,

        /// <remarks/>
        GB,

        /// <remarks/>
        VN,

        /// <remarks/>
        IT,

        /// <remarks/>
        TL,

        /// <remarks/>
        CI,

        /// <remarks/>
        BV,

        /// <remarks/>
        CX,

        /// <remarks/>
        IM,

        /// <remarks/>
        CK,

        /// <remarks/>
        VI,

        /// <remarks/>
        VG,

        /// <remarks/>
        HM,

        /// <remarks/>
        CC,

        /// <remarks/>
        MH,

        /// <remarks/>
        FO,

        /// <remarks/>
        SB,

        /// <remarks/>
        ST,

        /// <remarks/>
        TC,

        /// <remarks/>
        ZM,

        /// <remarks/>
        CV,

        /// <remarks/>
        ZW,

        /// <remarks/>
        AE,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TAdresPolski
    {

        private TKodKraju kodKrajuField;

        private string wojewodztwoField;

        private string powiatField;

        private string gminaField;

        private string ulicaField;

        private string nrDomuField;

        private string nrLokaluField;

        private string miejscowoscField;

        private string kodPocztowyField;

        private string pocztaField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public TAdresPolski()
        {
            this.kodKrajuField = TKodKraju.PL;
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TKodKraju KodKraju
        {
            get
            {
                return this.kodKrajuField;
            }
            set
            {
                this.kodKrajuField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1)]
        public string Wojewodztwo
        {
            get
            {
                return this.wojewodztwoField;
            }
            set
            {
                this.wojewodztwoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 2)]
        public string Powiat
        {
            get
            {
                return this.powiatField;
            }
            set
            {
                this.powiatField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 3)]
        public string Gmina
        {
            get
            {
                return this.gminaField;
            }
            set
            {
                this.gminaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 4)]
        public string Ulica
        {
            get
            {
                return this.ulicaField;
            }
            set
            {
                this.ulicaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 5)]
        public string NrDomu
        {
            get
            {
                return this.nrDomuField;
            }
            set
            {
                this.nrDomuField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 6)]
        public string NrLokalu
        {
            get
            {
                return this.nrLokaluField;
            }
            set
            {
                this.nrLokaluField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 7)]
        public string Miejscowosc
        {
            get
            {
                return this.miejscowoscField;
            }
            set
            {
                this.miejscowoscField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 8)]
        public string KodPocztowy
        {
            get
            {
                return this.kodPocztowyField;
            }
            set
            {
                this.kodPocztowyField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 9)]
        public string Poczta
        {
            get
            {
                return this.pocztaField;
            }
            set
            {
                this.pocztaField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TAdresPolski));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TAdresPolski object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TAdresPolski object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TAdresPolski object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TAdresPolski obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdresPolski);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TAdresPolski obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TAdresPolski Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TAdresPolski)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TAdresPolski object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TAdresPolski object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TAdresPolski object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TAdresPolski obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdresPolski);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TAdresPolski obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TAdresPolski obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TAdresPolski LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TAdresPolski LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TAdres
    {

        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("AdresPol", typeof(TAdresPolski), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("AdresZagr", typeof(TAdresZagraniczny), Order = 0)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TAdres));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TAdres object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TAdres object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TAdres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TAdres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdres);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TAdres obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TAdres Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TAdres)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TAdres object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TAdres object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TAdres object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TAdres obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TAdres);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TAdres obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TAdres obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TAdres LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TAdres LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TIdentyfikatorOsobyNiefizycznej
    {

        private string nIPField;

        private string pelnaNazwaField;

        private string rEGONField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string NIP
        {
            get
            {
                return this.nIPField;
            }
            set
            {
                this.nIPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1)]
        public string PelnaNazwa
        {
            get
            {
                return this.pelnaNazwaField;
            }
            set
            {
                this.pelnaNazwaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public string REGON
        {
            get
            {
                return this.rEGONField;
            }
            set
            {
                this.rEGONField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TIdentyfikatorOsobyNiefizycznej));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TIdentyfikatorOsobyNiefizycznej object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TIdentyfikatorOsobyNiefizycznej object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TIdentyfikatorOsobyNiefizycznej object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TIdentyfikatorOsobyNiefizycznej obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TIdentyfikatorOsobyNiefizycznej);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TIdentyfikatorOsobyNiefizycznej obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TIdentyfikatorOsobyNiefizycznej Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TIdentyfikatorOsobyNiefizycznej)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TIdentyfikatorOsobyNiefizycznej object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TIdentyfikatorOsobyNiefizycznej object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TIdentyfikatorOsobyNiefizycznej object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TIdentyfikatorOsobyNiefizycznej obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TIdentyfikatorOsobyNiefizycznej);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TIdentyfikatorOsobyNiefizycznej obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TIdentyfikatorOsobyNiefizycznej obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TIdentyfikatorOsobyNiefizycznej LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TIdentyfikatorOsobyNiefizycznej LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TIdentyfikatorOsobyFizycznej
    {

        private string nIPField;

        private string imiePierwszeField;

        private string nazwiskoField;

        private System.DateTime dataUrodzeniaField;

        private string pESELField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public string NIP
        {
            get
            {
                return this.nIPField;
            }
            set
            {
                this.nIPField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 1)]
        public string ImiePierwsze
        {
            get
            {
                return this.imiePierwszeField;
            }
            set
            {
                this.imiePierwszeField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "normalizedString", Order = 2)]
        public string Nazwisko
        {
            get
            {
                return this.nazwiskoField;
            }
            set
            {
                this.nazwiskoField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(DataType = "date", Order = 3)]
        public System.DateTime DataUrodzenia
        {
            get
            {
                return this.dataUrodzeniaField;
            }
            set
            {
                this.dataUrodzeniaField = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute(Order = 4)]
        public string PESEL
        {
            get
            {
                return this.pESELField;
            }
            set
            {
                this.pESELField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TIdentyfikatorOsobyFizycznej));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TIdentyfikatorOsobyFizycznej object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TIdentyfikatorOsobyFizycznej object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TIdentyfikatorOsobyFizycznej object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TIdentyfikatorOsobyFizycznej obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TIdentyfikatorOsobyFizycznej);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TIdentyfikatorOsobyFizycznej obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TIdentyfikatorOsobyFizycznej Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TIdentyfikatorOsobyFizycznej)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TIdentyfikatorOsobyFizycznej object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TIdentyfikatorOsobyFizycznej object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TIdentyfikatorOsobyFizycznej object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TIdentyfikatorOsobyFizycznej obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TIdentyfikatorOsobyFizycznej);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TIdentyfikatorOsobyFizycznej obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TIdentyfikatorOsobyFizycznej obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TIdentyfikatorOsobyFizycznej LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TIdentyfikatorOsobyFizycznej LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TPodmiotDowolny))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPodmiotDowolnyBezAdresu
    {

        private object itemField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("OsobaFizyczna", typeof(TIdentyfikatorOsobyFizycznej), Order = 0)]
        [System.Xml.Serialization.XmlElementAttribute("OsobaNiefizyczna", typeof(TIdentyfikatorOsobyNiefizycznej), Order = 0)]
        public object Item
        {
            get
            {
                return this.itemField;
            }
            set
            {
                this.itemField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TPodmiotDowolnyBezAdresu));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TPodmiotDowolnyBezAdresu object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TPodmiotDowolnyBezAdresu object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TPodmiotDowolnyBezAdresu object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TPodmiotDowolnyBezAdresu obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolnyBezAdresu);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TPodmiotDowolnyBezAdresu obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static TPodmiotDowolnyBezAdresu Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TPodmiotDowolnyBezAdresu)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TPodmiotDowolnyBezAdresu object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TPodmiotDowolnyBezAdresu object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TPodmiotDowolnyBezAdresu object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TPodmiotDowolnyBezAdresu obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolnyBezAdresu);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolnyBezAdresu obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolnyBezAdresu obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static TPodmiotDowolnyBezAdresu LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static TPodmiotDowolnyBezAdresu LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TPodmiotDowolny : TPodmiotDowolnyBezAdresu
    {

        private TPodmiotDowolnyAdresZamieszkaniaSiedziby adresZamieszkaniaSiedzibyField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TPodmiotDowolnyAdresZamieszkaniaSiedziby AdresZamieszkaniaSiedziby
        {
            get
            {
                if ((this.adresZamieszkaniaSiedzibyField == null))
                {
                    this.adresZamieszkaniaSiedzibyField = new TPodmiotDowolnyAdresZamieszkaniaSiedziby();
                }
                return this.adresZamieszkaniaSiedzibyField;
            }
            set
            {
                this.adresZamieszkaniaSiedzibyField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TPodmiotDowolny));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TPodmiotDowolny object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual new string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual new string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TPodmiotDowolny object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TPodmiotDowolny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TPodmiotDowolny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolny);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TPodmiotDowolny obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static new TPodmiotDowolny Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TPodmiotDowolny)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TPodmiotDowolny object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual new bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual new bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual new void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual new void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TPodmiotDowolny object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TPodmiotDowolny object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TPodmiotDowolny obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolny);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolny obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolny obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static new TPodmiotDowolny LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static new TPodmiotDowolny LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class TPodmiotDowolnyAdresZamieszkaniaSiedziby : TAdres
    {

        private string rodzajAdresuField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public TPodmiotDowolnyAdresZamieszkaniaSiedziby()
        {
            this.rodzajAdresuField = "RAD";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rodzajAdresu
        {
            get
            {
                return this.rodzajAdresuField;
            }
            set
            {
                this.rodzajAdresuField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TPodmiotDowolnyAdresZamieszkaniaSiedziby));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TPodmiotDowolnyAdresZamieszkaniaSiedziby object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual new string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual new string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an TPodmiotDowolnyAdresZamieszkaniaSiedziby object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TPodmiotDowolnyAdresZamieszkaniaSiedziby object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TPodmiotDowolnyAdresZamieszkaniaSiedziby obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolnyAdresZamieszkaniaSiedziby);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out TPodmiotDowolnyAdresZamieszkaniaSiedziby obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static new TPodmiotDowolnyAdresZamieszkaniaSiedziby Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((TPodmiotDowolnyAdresZamieszkaniaSiedziby)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current TPodmiotDowolnyAdresZamieszkaniaSiedziby object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual new bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual new bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual new void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual new void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an TPodmiotDowolnyAdresZamieszkaniaSiedziby object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TPodmiotDowolnyAdresZamieszkaniaSiedziby object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TPodmiotDowolnyAdresZamieszkaniaSiedziby obj, out System.Exception exception)
        {
            exception = null;
            obj = default(TPodmiotDowolnyAdresZamieszkaniaSiedziby);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolnyAdresZamieszkaniaSiedziby obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out TPodmiotDowolnyAdresZamieszkaniaSiedziby obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static new TPodmiotDowolnyAdresZamieszkaniaSiedziby LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static new TPodmiotDowolnyAdresZamieszkaniaSiedziby LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(IncludeInSchema = false)]
    public enum ItemChoiceType
    {

        /// <remarks/>
        Kwartal,

        /// <remarks/>
        Miesiac,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    public enum TKodUS
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0202")]
        Item0202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0203")]
        Item0203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0204")]
        Item0204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0205")]
        Item0205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0206")]
        Item0206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0207")]
        Item0207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0208")]
        Item0208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0209")]
        Item0209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0210")]
        Item0210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0211")]
        Item0211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0212")]
        Item0212,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0213")]
        Item0213,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0214")]
        Item0214,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0215")]
        Item0215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0216")]
        Item0216,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0217")]
        Item0217,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0218")]
        Item0218,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0219")]
        Item0219,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0220")]
        Item0220,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0221")]
        Item0221,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0222")]
        Item0222,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0223")]
        Item0223,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0224")]
        Item0224,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0225")]
        Item0225,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0226")]
        Item0226,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0227")]
        Item0227,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0228")]
        Item0228,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0229")]
        Item0229,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0230")]
        Item0230,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0231")]
        Item0231,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0232")]
        Item0232,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0233")]
        Item0233,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0234")]
        Item0234,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0271")]
        Item0271,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0402")]
        Item0402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0403")]
        Item0403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0404")]
        Item0404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0405")]
        Item0405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0406")]
        Item0406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0407")]
        Item0407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0408")]
        Item0408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0409")]
        Item0409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0410")]
        Item0410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0411")]
        Item0411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0412")]
        Item0412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0413")]
        Item0413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0414")]
        Item0414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0415")]
        Item0415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0416")]
        Item0416,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0417")]
        Item0417,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0418")]
        Item0418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0419")]
        Item0419,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0420")]
        Item0420,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0421")]
        Item0421,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0422")]
        Item0422,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0423")]
        Item0423,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0471")]
        Item0471,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0602")]
        Item0602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0603")]
        Item0603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0604")]
        Item0604,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0605")]
        Item0605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0606")]
        Item0606,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0607")]
        Item0607,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0608")]
        Item0608,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0609")]
        Item0609,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0610")]
        Item0610,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0611")]
        Item0611,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0612")]
        Item0612,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0613")]
        Item0613,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0614")]
        Item0614,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0615")]
        Item0615,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0616")]
        Item0616,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0617")]
        Item0617,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0618")]
        Item0618,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0619")]
        Item0619,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0620")]
        Item0620,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0621")]
        Item0621,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0622")]
        Item0622,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0671")]
        Item0671,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0802")]
        Item0802,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0803")]
        Item0803,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0804")]
        Item0804,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0805")]
        Item0805,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0806")]
        Item0806,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0807")]
        Item0807,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0808")]
        Item0808,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0809")]
        Item0809,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0810")]
        Item0810,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0811")]
        Item0811,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0812")]
        Item0812,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0813")]
        Item0813,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0814")]
        Item0814,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0871")]
        Item0871,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1002")]
        Item1002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1003")]
        Item1003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1004")]
        Item1004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1005")]
        Item1005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1006")]
        Item1006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1007")]
        Item1007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1008")]
        Item1008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1009")]
        Item1009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1010")]
        Item1010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1011")]
        Item1011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1012")]
        Item1012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1013")]
        Item1013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1014")]
        Item1014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1015")]
        Item1015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1016")]
        Item1016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1017")]
        Item1017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1018")]
        Item1018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1019")]
        Item1019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1020")]
        Item1020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1021")]
        Item1021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1022")]
        Item1022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1023")]
        Item1023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1024")]
        Item1024,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1025")]
        Item1025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1026")]
        Item1026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1027")]
        Item1027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1028")]
        Item1028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1029")]
        Item1029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1071")]
        Item1071,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1202")]
        Item1202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1203")]
        Item1203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1204")]
        Item1204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1205")]
        Item1205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1206")]
        Item1206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1207")]
        Item1207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1208")]
        Item1208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1209")]
        Item1209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1210")]
        Item1210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1211")]
        Item1211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1212")]
        Item1212,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1213")]
        Item1213,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1214")]
        Item1214,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1215")]
        Item1215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1216")]
        Item1216,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1217")]
        Item1217,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1218")]
        Item1218,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1219")]
        Item1219,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1220")]
        Item1220,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1221")]
        Item1221,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1222")]
        Item1222,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1223")]
        Item1223,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1224")]
        Item1224,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1225")]
        Item1225,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1226")]
        Item1226,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1227")]
        Item1227,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1228")]
        Item1228,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1271")]
        Item1271,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1402")]
        Item1402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1403")]
        Item1403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1404")]
        Item1404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1405")]
        Item1405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1406")]
        Item1406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1407")]
        Item1407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1408")]
        Item1408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1409")]
        Item1409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1410")]
        Item1410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1411")]
        Item1411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1412")]
        Item1412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1413")]
        Item1413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1414")]
        Item1414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1415")]
        Item1415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1416")]
        Item1416,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1417")]
        Item1417,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1418")]
        Item1418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1419")]
        Item1419,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1420")]
        Item1420,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1421")]
        Item1421,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1422")]
        Item1422,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1423")]
        Item1423,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1424")]
        Item1424,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1425")]
        Item1425,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1426")]
        Item1426,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1427")]
        Item1427,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1428")]
        Item1428,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1429")]
        Item1429,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1430")]
        Item1430,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1431")]
        Item1431,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1432")]
        Item1432,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1433")]
        Item1433,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1434")]
        Item1434,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1435")]
        Item1435,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1436")]
        Item1436,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1437")]
        Item1437,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1438")]
        Item1438,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1439")]
        Item1439,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1440")]
        Item1440,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1441")]
        Item1441,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1442")]
        Item1442,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1443")]
        Item1443,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1444")]
        Item1444,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1445")]
        Item1445,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1446")]
        Item1446,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1447")]
        Item1447,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1448")]
        Item1448,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1449")]
        Item1449,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1471")]
        Item1471,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1472")]
        Item1472,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1473")]
        Item1473,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1602")]
        Item1602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1603")]
        Item1603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1604")]
        Item1604,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1605")]
        Item1605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1606")]
        Item1606,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1607")]
        Item1607,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1608")]
        Item1608,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1609")]
        Item1609,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1610")]
        Item1610,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1611")]
        Item1611,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1612")]
        Item1612,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1613")]
        Item1613,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1671")]
        Item1671,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1802")]
        Item1802,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1803")]
        Item1803,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1804")]
        Item1804,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1805")]
        Item1805,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1806")]
        Item1806,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1807")]
        Item1807,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1808")]
        Item1808,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1809")]
        Item1809,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1810")]
        Item1810,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1811")]
        Item1811,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1812")]
        Item1812,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1813")]
        Item1813,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1814")]
        Item1814,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1815")]
        Item1815,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1816")]
        Item1816,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1817")]
        Item1817,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1818")]
        Item1818,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1819")]
        Item1819,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1820")]
        Item1820,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1821")]
        Item1821,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1822")]
        Item1822,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1823")]
        Item1823,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1871")]
        Item1871,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2002")]
        Item2002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2003")]
        Item2003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2004")]
        Item2004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2005")]
        Item2005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2006")]
        Item2006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2007")]
        Item2007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2008")]
        Item2008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2009")]
        Item2009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2010")]
        Item2010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2011")]
        Item2011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2012")]
        Item2012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2013")]
        Item2013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2014")]
        Item2014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2015")]
        Item2015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2071")]
        Item2071,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2202")]
        Item2202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2203")]
        Item2203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2204")]
        Item2204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2205")]
        Item2205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2206")]
        Item2206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2207")]
        Item2207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2208")]
        Item2208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2209")]
        Item2209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2210")]
        Item2210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2211")]
        Item2211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2212")]
        Item2212,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2213")]
        Item2213,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2214")]
        Item2214,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2215")]
        Item2215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2216")]
        Item2216,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2217")]
        Item2217,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2218")]
        Item2218,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2219")]
        Item2219,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2220")]
        Item2220,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2221")]
        Item2221,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2271")]
        Item2271,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2402")]
        Item2402,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2403")]
        Item2403,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2404")]
        Item2404,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2405")]
        Item2405,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2406")]
        Item2406,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2407")]
        Item2407,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2408")]
        Item2408,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2409")]
        Item2409,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2410")]
        Item2410,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2411")]
        Item2411,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2412")]
        Item2412,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2413")]
        Item2413,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2414")]
        Item2414,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2415")]
        Item2415,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2416")]
        Item2416,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2417")]
        Item2417,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2418")]
        Item2418,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2419")]
        Item2419,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2420")]
        Item2420,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2421")]
        Item2421,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2422")]
        Item2422,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2423")]
        Item2423,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2424")]
        Item2424,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2425")]
        Item2425,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2426")]
        Item2426,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2427")]
        Item2427,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2428")]
        Item2428,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2429")]
        Item2429,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2430")]
        Item2430,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2431")]
        Item2431,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2432")]
        Item2432,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2433")]
        Item2433,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2434")]
        Item2434,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2435")]
        Item2435,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2436")]
        Item2436,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2471")]
        Item2471,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2472")]
        Item2472,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2602")]
        Item2602,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2603")]
        Item2603,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2604")]
        Item2604,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2605")]
        Item2605,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2606")]
        Item2606,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2607")]
        Item2607,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2608")]
        Item2608,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2609")]
        Item2609,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2610")]
        Item2610,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2611")]
        Item2611,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2612")]
        Item2612,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2613")]
        Item2613,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2614")]
        Item2614,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2615")]
        Item2615,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2671")]
        Item2671,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2802")]
        Item2802,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2803")]
        Item2803,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2804")]
        Item2804,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2805")]
        Item2805,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2806")]
        Item2806,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2807")]
        Item2807,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2808")]
        Item2808,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2809")]
        Item2809,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2810")]
        Item2810,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2811")]
        Item2811,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2812")]
        Item2812,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2813")]
        Item2813,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2814")]
        Item2814,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2815")]
        Item2815,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2816")]
        Item2816,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2871")]
        Item2871,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3002")]
        Item3002,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3003")]
        Item3003,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3004")]
        Item3004,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3005")]
        Item3005,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3006")]
        Item3006,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3007")]
        Item3007,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3008")]
        Item3008,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3009")]
        Item3009,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3010")]
        Item3010,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3011")]
        Item3011,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3012")]
        Item3012,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3013")]
        Item3013,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3014")]
        Item3014,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3015")]
        Item3015,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3016")]
        Item3016,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3017")]
        Item3017,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3018")]
        Item3018,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3019")]
        Item3019,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3020")]
        Item3020,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3021")]
        Item3021,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3022")]
        Item3022,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3023")]
        Item3023,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3025")]
        Item3025,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3026")]
        Item3026,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3027")]
        Item3027,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3028")]
        Item3028,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3029")]
        Item3029,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3030")]
        Item3030,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3031")]
        Item3031,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3032")]
        Item3032,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3033")]
        Item3033,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3034")]
        Item3034,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3035")]
        Item3035,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3036")]
        Item3036,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3037")]
        Item3037,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3038")]
        Item3038,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3039")]
        Item3039,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3071")]
        Item3071,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3072")]
        Item3072,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3202")]
        Item3202,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3203")]
        Item3203,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3204")]
        Item3204,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3205")]
        Item3205,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3206")]
        Item3206,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3207")]
        Item3207,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3208")]
        Item3208,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3209")]
        Item3209,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3210")]
        Item3210,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3211")]
        Item3211,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3212")]
        Item3212,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3213")]
        Item3213,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3214")]
        Item3214,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3215")]
        Item3215,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3216")]
        Item3216,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3217")]
        Item3217,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3218")]
        Item3218,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3219")]
        Item3219,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3220")]
        Item3220,

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3271")]
        Item3271,
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public partial class DeklaracjaPodmiot1 : TPodmiotDowolny
    {

        private string rolaField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public DeklaracjaPodmiot1()
        {
            this.rolaField = "Podatnik";
        }

        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string rola
        {
            get
            {
                return this.rolaField;
            }
            set
            {
                this.rolaField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeklaracjaPodmiot1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeklaracjaPodmiot1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual new string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual new string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an DeklaracjaPodmiot1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeklaracjaPodmiot1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeklaracjaPodmiot1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DeklaracjaPodmiot1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out DeklaracjaPodmiot1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static new DeklaracjaPodmiot1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((DeklaracjaPodmiot1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current DeklaracjaPodmiot1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual new bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual new bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual new void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual new void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an DeklaracjaPodmiot1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeklaracjaPodmiot1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeklaracjaPodmiot1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(DeklaracjaPodmiot1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out DeklaracjaPodmiot1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out DeklaracjaPodmiot1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static new DeklaracjaPodmiot1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static new DeklaracjaPodmiot1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class PozycjeSzczegolowe
    {

        private List<Grupa1> grupa1Field;

        private List<Grupa2> grupa2Field;

        private List<Grupa3> grupa3Field;

        private static System.Xml.Serialization.XmlSerializer serializer;

        [System.Xml.Serialization.XmlElementAttribute("Grupa1", Order = 0)]
        public List<Grupa1> Grupa1
        {
            get
            {
                if ((this.grupa1Field == null))
                {
                    this.grupa1Field = new List<Grupa1>();
                }
                return this.grupa1Field;
            }
            set
            {
                this.grupa1Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Grupa2", Order = 1)]
        public List<Grupa2> Grupa2
        {
            get
            {
                if ((this.grupa2Field == null))
                {
                    this.grupa2Field = new List<Grupa2>();
                }
                return this.grupa2Field;
            }
            set
            {
                this.grupa2Field = value;
            }
        }

        [System.Xml.Serialization.XmlElementAttribute("Grupa3", Order = 2)]
        public List<Grupa3> Grupa3
        {
            get
            {
                if ((this.grupa3Field == null))
                {
                    this.grupa3Field = new List<Grupa3>();
                }
                return this.grupa3Field;
            }
            set
            {
                this.grupa3Field = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PozycjeSzczegolowe));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PozycjeSzczegolowe object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an PozycjeSzczegolowe object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PozycjeSzczegolowe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PozycjeSzczegolowe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PozycjeSzczegolowe);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out PozycjeSzczegolowe obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static PozycjeSzczegolowe Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((PozycjeSzczegolowe)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current PozycjeSzczegolowe object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an PozycjeSzczegolowe object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PozycjeSzczegolowe object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PozycjeSzczegolowe obj, out System.Exception exception)
        {
            exception = null;
            obj = default(PozycjeSzczegolowe);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out PozycjeSzczegolowe obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out PozycjeSzczegolowe obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static PozycjeSzczegolowe LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static PozycjeSzczegolowe LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Informacja o wewnątrzwspólnotowych dostawach towarów
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Grupa1
    {

        private TKodKrajuUE p_DaField;

        private string p_DbField;

        private decimal p_DcField;

        private sbyte p_DdField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Kod kraju kontrahenta (nabywcy towaru)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TKodKrajuUE P_Da
        {
            get
            {
                return this.p_DaField;
            }
            set
            {
                this.p_DaField = value;
            }
        }

        /// <summary>
        /// Numer Identyfikacyjny VAT kontrahenta (nabywcy towaru)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string P_Db
        {
            get
            {
                return this.p_DbField;
            }
            set
            {
                this.p_DbField = value;
            }
        }

        /// <summary>
        /// Kwota transakcji w zł
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public decimal P_Dc
        {
            get
            {
                return this.p_DcField;
            }
            set
            {
                this.p_DcField = value;
            }
        }

        /// <summary>
        /// 2 - pozycja dotyczy transakcji trójstronnych
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public sbyte P_Dd
        {
            get
            {
                return this.p_DdField;
            }
            set
            {
                this.p_DdField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Grupa1));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Grupa1 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Grupa1 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Grupa1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Grupa1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa1);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Grupa1 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Grupa1 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Grupa1)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Grupa1 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Grupa1 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Grupa1 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Grupa1 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa1);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Grupa1 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Grupa1 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Grupa1 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Grupa1 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    public enum TKodKrajuUE
    {

        /// <remarks/>
        AT,

        /// <remarks/>
        BE,

        /// <remarks/>
        BG,

        /// <remarks/>
        CY,

        /// <remarks/>
        CZ,

        /// <remarks/>
        DK,

        /// <remarks/>
        DE,

        /// <remarks/>
        EE,

        /// <remarks/>
        EL,

        /// <remarks/>
        ES,

        /// <remarks/>
        FI,

        /// <remarks/>
        FR,

        /// <remarks/>
        GB,

        /// <remarks/>
        HU,

        /// <remarks/>
        IE,

        /// <remarks/>
        IT,

        /// <remarks/>
        LV,

        /// <remarks/>
        LT,

        /// <remarks/>
        LU,

        /// <remarks/>
        MT,

        /// <remarks/>
        NL,

        /// <remarks/>
        PT,

        /// <remarks/>
        RO,

        /// <remarks/>
        SE,

        /// <remarks/>
        SI,

        /// <remarks/>
        SK,
    }

    /// <summary>
    /// Informacja o wewnątrzwspólnotowych nabyciach towarów
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Grupa2
    {

        private TKodKrajuUE p_NaField;

        private string p_NbField;

        private decimal p_NcField;

        private sbyte p_NdField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Kod kraju kontrahenta (dostawcy towaru)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TKodKrajuUE P_Na
        {
            get
            {
                return this.p_NaField;
            }
            set
            {
                this.p_NaField = value;
            }
        }

        /// <summary>
        /// Numer Identyfikacyjny VAT kontrahenta (dostawcy towaru)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string P_Nb
        {
            get
            {
                return this.p_NbField;
            }
            set
            {
                this.p_NbField = value;
            }
        }

        /// <summary>
        /// Kwota transakcji w zł
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public decimal P_Nc
        {
            get
            {
                return this.p_NcField;
            }
            set
            {
                this.p_NcField = value;
            }
        }

        /// <summary>
        /// 2 - pozycja dotyczy transakcji trójstronnych
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 3)]
        public sbyte P_Nd
        {
            get
            {
                return this.p_NdField;
            }
            set
            {
                this.p_NdField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Grupa2));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Grupa2 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Grupa2 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Grupa2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Grupa2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa2);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Grupa2 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Grupa2 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Grupa2)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Grupa2 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Grupa2 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Grupa2 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Grupa2 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa2);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Grupa2 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Grupa2 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Grupa2 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Grupa2 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Informacja o wewnątrzwspólnotowym świadczeniu usług
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "", IsNullable = false)]
    public partial class Grupa3
    {

        private TKodKrajuUE p_UaField;

        private string p_UbField;

        private decimal p_UcField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        /// <summary>
        /// Kod kraju kontrahenta (usługobiorcy)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 0)]
        public TKodKrajuUE P_Ua
        {
            get
            {
                return this.p_UaField;
            }
            set
            {
                this.p_UaField = value;
            }
        }

        /// <summary>
        /// Numer Identyfikacyjny VAT kontrahenta (usługobiorcy)
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 1)]
        public string P_Ub
        {
            get
            {
                return this.p_UbField;
            }
            set
            {
                this.p_UbField = value;
            }
        }

        /// <summary>
        /// Kwota transakcji w zł
        /// </summary>
        [System.Xml.Serialization.XmlElementAttribute(Order = 2)]
        public decimal P_Uc
        {
            get
            {
                return this.p_UcField;
            }
            set
            {
                this.p_UcField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Grupa3));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Grupa3 object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding)
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        public virtual string Serialize()
        {
            return Serialize(Encoding.UTF8);
        }

        /// <summary>
        /// Deserializes workflow markup into an Grupa3 object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Grupa3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Grupa3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa3);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out Grupa3 obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static Grupa3 Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((Grupa3)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current Grupa3 object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }

        public virtual void SaveToFile(string fileName)
        {
            SaveToFile(fileName, Encoding.UTF8);
        }

        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an Grupa3 object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Grupa3 object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Grupa3 obj, out System.Exception exception)
        {
            exception = null;
            obj = default(Grupa3);
            try
            {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out Grupa3 obj, out System.Exception exception)
        {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }

        public static bool LoadFromFile(string fileName, out Grupa3 obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static Grupa3 LoadFromFile(string fileName)
        {
            return LoadFromFile(fileName, Encoding.UTF8);
        }

        public static Grupa3 LoadFromFile(string fileName, System.Text.Encoding encoding)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true)]
    public enum DeklaracjaOswiadczenie
    {

        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("Oświadczam, że są mi znane przepisy Kodeksu karnego skarbowego o odpowiedzialnośc" +
            "i za podanie danych niezgodnych z rzeczywistością.")]
        OświadczamżesąmiznaneprzepisyKodeksukarnegoskarbowegooodpowiedzialnościzapodaniedanychniezgodnychzrzeczywistością,
    }
}
